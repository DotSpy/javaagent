plugins {
    id 'java'
    id("com.github.johnrengelman.shadow") version "6.0.0"
}

group 'ai.traceable.agent.javaagent'
version 'unspecified'

//repositories {
//    mavenCentral()
//}

dependencies {
    compileOnly group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'


    implementation group: 'io.opentelemetry.instrumentation.auto', name: 'opentelemetry-auto-servlet-3.0', version: "0.8.0-SNAPSHOT"
 //   implementation group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-auto-servlet', version: "0.8.0"

//    implementation group: 'io.opentelemetry.instrumentation.auto', name: 'opentelemetry-auto-servlet-common', version: "0.8.0"
//    implementation group: 'io.opentelemetry.instrumentation.auto', name: 'opentelemetry-auto-servlet-2.2', version: "0.8.0"
//    implementation group: 'io.opentelemetry.instrumentation.auto', name: 'opentelemetry-auto-servlet-3.0', version: "0.8.0"
 //   implementation group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-auto-servlet', version: "0.8.0"
    compile group: 'net.bytebuddy', name: 'byte-buddy', version:'1.10.10'
    compile group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc3'
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc3'

    implementation group: 'io.opentelemetry.javaagent', name: 'opentelemetry-javaagent-tooling', version: "0.8.0-SNAPSHOT"
    implementation group: 'io.opentelemetry.javaagent', name: 'opentelemetry-javaagent-bootstrap', version: "0.8.0-SNAPSHOT"
    compileOnly group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-auto-api', version: "0.8.0"
    compileOnly group: 'io.opentelemetry.instrumentation', name: 'opentelemetry-instrumentation-api', version: "0.8.0"

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

// need to perform shading in two steps in order to avoid shading java.util.logging.Logger
// in opentelemetry-auto-java-util-logging-spans since that instrumentation needs to
// reference unshaded java.util.logging.Logger
// (java.util.logging.Logger shading is not needed in any of the instrumentation modules,
// but it is needed for the dependencies, e.g. guava, which use java.util.logging.Logger)
task shadowJarStep1(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {

    archiveClassifier = 'step1'
    destinationDirectory = file("${project.buildDir}/step1")

    configurations = [project.configurations.runtime]

    dependencies {
        exclude(dependency('io.opentelemetry.instrumentation.auto:opentelemetry-auto-java-util-logging-spans'))

    //    exclude bootstrap dependencies from shadowJar
        exclude(dependency('io.opentelemetry.instrumentation.auto:opentelemetry-javaagent-bootstrap'))
        exclude(dependency('io.opentelemetry:opentelemetry-api'))
        exclude(dependency('io.opentelemetry:opentelemetry-context-prop'))
        exclude(dependency('io.grpc:grpc-context'))
        exclude(dependency('org.slf4j:slf4j-api'))
    }

    // rewrite dependencies calling Logger.getLogger
    relocate 'java.util.logging.Logger', 'io.opentelemetry.javaagent.bootstrap.PatchLogger'
}


shadowJar {

    dependsOn shadowJarStep1

    archiveClassifier = ''

    from {
        zipTree(shadowJarStep1.archiveFile)
    }

    dependencies {
        // exclude bootstrap dependencies from shadowJar
        exclude(dependency('io.opentelemetry.instrumentation.auto:opentelemetry-javaagent-bootstrap'))
        exclude(dependency('io.opentelemetry:opentelemetry-api'))
        exclude(dependency('io.opentelemetry:opentelemetry-context-prop'))
        exclude(dependency('io.grpc:grpc-context'))
        exclude(dependency('org.slf4j:slf4j-api'))
    }

    mergeServiceFiles()

    exclude '**/module-info.class'

    // Prevents conflict with other SLF4J instances. Important for premain.
    relocate 'org.slf4j', 'io.opentelemetry.javaagent.slf4j'

    // rewrite library instrumentation dependencies
    relocate("io.opentelemetry.instrumentation", "io.opentelemetry.javaagent.shaded.instrumentation") {
        exclude "io.opentelemetry.instrumentation.auto.**"
    }

    // prevents conflict with library instrumentation
    relocate 'io.opentelemetry.instrumentation.api', 'io.opentelemetry.javaagent.shaded.instrumentation.api'

    // relocate OpenTelemetry API usage
    relocate "io.opentelemetry.OpenTelemetry", "io.opentelemetry.javaagent.shaded.io.opentelemetry.OpenTelemetry"
    relocate "io.opentelemetry.common", "io.opentelemetry.javaagent.shaded.io.opentelemetry.common"
    relocate "io.opentelemetry.context", "io.opentelemetry.javaagent.shaded.io.opentelemetry.context"
    relocate "io.opentelemetry.correlationcontext", "io.opentelemetry.javaagent.shaded.io.opentelemetry.correlationcontext"
    relocate "io.opentelemetry.internal", "io.opentelemetry.javaagent.shaded.io.opentelemetry.internal"
    relocate "io.opentelemetry.metrics", "io.opentelemetry.javaagent.shaded.io.opentelemetry.metrics"
    relocate "io.opentelemetry.trace", "io.opentelemetry.javaagent.shaded.io.opentelemetry.trace"

    // relocate OpenTelemetry API dependency usage
    relocate "io.grpc.Context", "io.opentelemetry.javaagent.shaded.io.grpc.Context"

    // this is for instrumentation on opentelemetry-api itself
    relocate "unshaded.io.opentelemetry", "io.opentelemetry"
    relocate "unshaded.io.grpc", "io.grpc"

    // this is for instrumentation on logback
    relocate "unshaded.ch.qos.logback", "ch.qos.logback"
    relocate "unshaded.org.slf4j", "org.slf4j"
}

artifacts {
    archives shadowJar
}
